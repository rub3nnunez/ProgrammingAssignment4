swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cle_vect)
class(cls_vect)
sum(flags)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
lapply(flag_colors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$lanimate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
colmeans(iris)
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
data("mtcars")
?mtcars
head(mtcars)
tapply(mtcars$cyl, summary)
lapply(mtcars$cyl, summary)
tapply(mtcars$hp, mtcars$cyl, mean.Date)
x <- tapply(mtcars$hp, mtcars$cyl, mean.Date)
class(x)
x$4 - x$8
x[1] - x[3]
round(abs(x[1] - x[3]))
debug(ls)
ls
exit
bye
x$setrev(m)
m
makeCacheMatrix
x <<- y
m <<- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setrev <- function(solve) m <<- solve
getrev <- function() m
list(set = set, get = get,
setrev = setrev,
getrev = getrev)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setrev <- function(solve) m <<- solve
getrev <- function() m
list(set = set, get = get,
setrev = setrev,
getrev = getrev)
}
source('~/github/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
mat <- makeCacheMatrix()
mat
mat$set(matrix(data = (1:10), nrow = 5, ncol = 2))
mat$set()
mat$get()
cacheSolve(mat$get())
cacheSolve()
str(cacheSolve)
cacheSolve(mat)
cacheSolve(mat)
source('~/github/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
set.seed(1)
rpois(5,2)
pbinom?
11
?pbinom
?qbinom
?rpois
?ppois
library(swirl)
swirl()
ls(plants)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace = TRUE, prob=(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 25)
rnorm(10, mean=100, sd=25)
rpois/5)
rpois(5)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "75ffc4989df8001de43a",
secret = "389877827ca7031f4586a37206816ec5152088dc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
datashare <- which(sapply(output, FUN=function(X) "datasharing" %in% X))
datashare
list(output[[15]]$name, output[[15]]$created_at)
datashare <- which(sapply(output, FUN=function(X) "datasharing" %in% X))
datashare
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf
)
head(mydf)
library(dplyr)
package_version("dyplr")
packageversion("dyplr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -x:size)
select(cran, x:size)
select(cran, -date:size)
select(cran, date:size)
select(cran, -date:size)
-5:20
-(5:20)
select(cran, -(date:size))
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",
| country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country ==
| "US" | country == "IN")
filter(cran, country== "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version)
)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(carn, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3,size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+ 1000)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
librayr(dyplr)
library(dyplr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
mean(size)
mean(cran, size)
summarize(by_package, mean(size))
?n
?n_distinct
summit()
submit()
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
reset()
swril()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- summarize(by_package, n() > 679
)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
reset()
library(swirl)
swirl
swirl()
swirl()
library(tidyr)
students
?gather
gather(students, sex count, -grade)
gather(students, sex, count, -grade)
students2
?gather
gather(students2, class, count, -grade)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, sex_class, c(sex, class()))
separate(res, sex_class, c("sex", "class"))
submit()
submit()
students3
submit()
?gahter
?gather
sspread()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
submit()
passes
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
submit()
?separate
submit()
submit()
submit()
submit()
library(data.table)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "america_comm_survey.csv")
dateDownloaded <- date()
data <- read.csv("america_comm_survey.csv")
head(data$VAL)
cran <- tbl_df(data)
library(dyplr)
library(dyplr)
library(dplyr)
cran <- tbl_df(data)
cran
select(cran, ACR=3, AGs=6)
select(cran, serialno, ACR=3, AGs=6)
select(cran, SERIALNO, ACR=3, AGs=6)
arrange(select(cran, SERIALNO, ACR=3, AGs=6))
agricultureLogical <- Q1$ACR == 3 & Q1$AGS == 6
agricultureLogical <- data$ACR == 3 & data$AGS == 6
which(agricultureLogical)
cran2 <- select(cran, SERIALNO, ACR=3, AGs=6)
cran2
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile = "test.jpg")
dateDownloaded <- date()
image <- readJPEG(source, native = TRUE)
install.packages(jpeg)
library(jpeg)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile = "test.jpg")
dateDownloaded <- date()
image <- readJPEG(source, native = TRUE)
image <- readJPEG( "test.jpg", native = TRUE)
image
quantile(imighe, probs = 0.80)
quantile(image, probs = 0.80)
quantile(image, probs = 0.30)
quantile(image, probs = c(0.3, 0.8))
Q2Url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
Q2Path = '/home/cabunic/Data Science/Coursera/3 - Getting and Cleaning Data/Week 3/Q2.jpg'
download.file(Q2Url, Q2Path, mode = 'wb')
Q2 <- readJPEG(Q2Path, native = TRUE)
Q2Url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
Q2Path = '/home/cabunic/Data Science/Coursera/3 - Getting and Cleaning Data/Week 3/Q2.jpg'
download.file(Q2Url, Q2Path, mode = 'wb')
Q2 <- readJPEG(Q2Path, native = TRUE)
Q2Url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
Q2Path = 'Q2.jpg'
download.file(Q2Url, Q2Path, mode = 'wb')
Q2 <- readJPEG(Q2Path, native = TRUE)
q2
Q2
quantile(Q2, probs = c(0.3, 0.8))
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date < ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989-")
ymd("1989-")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(" 25th day of August 1985")
dmy("25th day of August 1985")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
sapply(dt2, ymd())
sapply(dt2, ymd
)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now()
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, h=17, m=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
interval(arrive, last_time)
?interval
how_long <- interval(arrive, last_time)
how_long <- interval( last_time, arrive)
as.period(how_long)
stopwatch()
### The required steps of the assigment
### The required steps of the assigment
subset.tidy <- aggregate(. ~subject + activity, subset.data, mean)
library(dplyr)
library(dplyr)
run_analysis.R
getwd()
setwd("R")
setwd("ProgrammingAssigment4")
getwd()
suource("run_analysis.R")
source("run_analyis.R")
getwd
getwd()
source('run_analyis.R')
source('run_analysis.R')
setwd("R/ProgrammingAssigment4")
setwd("/R/ProgrammingAssigment4")
setwd("\R\ProgrammingAssigment4")
setwd("R\ProgrammingAssigment4")
setwd('/R/ProgrammingAssigment4')
setwd('/ProgrammingAssigment4')
exit
